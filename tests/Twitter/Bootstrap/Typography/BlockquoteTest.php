<?php

use Mockery as m;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-08-21 at 18:00:55.
 */
class Twitter_Bootstrap_Typography_BlockquoteTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Twitter_Bootstrap_Typography_Blockquote
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Twitter_Bootstrap_Typography_Blockquote;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object = null;
    }

    public function testBlockquoteWithoutNamingSource()
    {
        $view = m::mock('Zend_View');
        $view->shouldReceive('escape')->with('test')->once()->andReturn('test');

        $this->object->setView($view);
        $this->assertEquals('<blockquote>test</blockquote>', $this->object->blockquote('test'));
    }

    public function testBlockquoteWithNamingSource()
    {
        $view = m::mock('Zend_View');
        $view->shouldReceive('escape')->with('test')->times(3)->andReturn('test');

        $this->object->setView($view);
        $this->assertEquals('<blockquote>test <small>test <cite title="test">test</cite></small></blockquote>', $this->object->blockquote('test', 'test', 'test', 'test'));
    }

    public function testBlockquotePulledRight()
    {
        $view = m::mock('Zend_View');
        $view->shouldReceive('escape')->with('test')->times(3)->andReturn('test');
        $view->shouldReceive('escape')->with('class')->once()->andReturn('class');
        $view->shouldReceive('escape')->with('pull-right')->once()->andReturn('pull-right');

        $this->object->setView($view);
        $this->assertEquals('<blockquote class="pull-right">test</blockquote>', $this->object->blockquote('test', null, null, null, array('class' => 'pull-right')));
    }
}